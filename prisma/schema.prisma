// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  name      String?   @db.VarChar(255)
  email     String    @unique @db.VarChar(255)
  image     String?   @db.VarChar(255)
  createdAt DateTime? @default(now()) @db.Timestamp(6)
  updatedAt DateTime? @updatedAt @db.Timestamp(6)

  // Relations
  accounts Account[]
  posts    Post[]
  comments Comment[]
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  name              String  @db.VarChar(255)
  image             String? @db.VarChar(255)
  password          String? @db.VarChar(255)
  provider          String  @db.VarChar(255)
  providerAccountId String  @db.VarChar(255)
  createdAt         DateTime @default(now()) @db.Timestamp(6)
  updatedAt         DateTime @updatedAt @db.Timestamp(6)

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String   @db.VarChar(255)
  content   String   @db.Text
  views     Int      @default(0)
  upvotes   Int      @default(0)
  downvotes Int      @default(0)
  published Boolean  @default(false)
  authorId  Int
  createdAt DateTime? @default(now()) @db.Timestamp(6)
  updatedAt DateTime? @updatedAt @db.Timestamp(6)

  // Relations
  author   User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  tags     PostTag[]
  comments Comment[]
}

model Tag {
  id        Int       @id @default(autoincrement())
  name      String    @unique @db.VarChar(100)
  postCount Int       @default(0)
  createdAt DateTime  @default(now()) @db.Timestamp(6)
  updatedAt DateTime  @updatedAt @db.Timestamp(6)

  // Relations
  posts PostTag[]
}

model PostTag {
  id     Int @id @default(autoincrement())
  postId Int
  tagId  Int

  // Relations
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([postId, tagId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String   @db.Text
  upvotes   Int      @default(0)
  downvotes Int      @default(0)
  authorId  Int
  postId    Int
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)

  // Relations
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}