// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts Account[]
  posts    Post[]
  comments Comment[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Custom field for credentials auth
  password          String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Post {
  id           Int      @id @default(autoincrement())
  title        String   @db.VarChar(255)
  slug         String   @unique @db.VarChar(255)
  content      String   @db.Text
  summary      String?  @db.VarChar(1000)
  featuredImage String? @db.VarChar(500)
  views        Int      @default(0)
  upvotes      Int      @default(0)
  downvotes    Int      @default(0)
  published    Boolean  @default(false)
  authorId     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  author     User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  categories PostCategory[]
  comments   Comment[]
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique @db.VarChar(100)
  postCount Int       @default(0)
  createdAt DateTime  @default(now()) @db.Timestamp(6)
  updatedAt DateTime  @updatedAt @db.Timestamp(6)

  // Relations
  posts PostCategory[]
}

model PostCategory {
  id         Int @id @default(autoincrement())
  postId     Int
  categoryId Int

  // Relations
  post     Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([postId, categoryId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String   @db.Text
  upvotes   Int      @default(0)
  downvotes Int      @default(0)
  authorId  String
  postId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

